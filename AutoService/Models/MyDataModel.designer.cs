#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     Этот код создан программой.
//     Исполняемая версия:4.0.30319.42000
//
//     Изменения в этом файле могут привести к неправильной работе и будут потеряны в случае
//     повторной генерации кода.
// </auto-generated>
//------------------------------------------------------------------------------

namespace AutoService.Models
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="Auto_Service_DB")]
	public partial class MyDataModelDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Определения метода расширяемости
    partial void OnCreated();
    partial void InsertUsers(Users instance);
    partial void UpdateUsers(Users instance);
    partial void DeleteUsers(Users instance);
    partial void InsertStatus(Status instance);
    partial void UpdateStatus(Status instance);
    partial void DeleteStatus(Status instance);
    partial void InsertApplications(Applications instance);
    partial void UpdateApplications(Applications instance);
    partial void DeleteApplications(Applications instance);
    partial void InsertMasters(Masters instance);
    partial void UpdateMasters(Masters instance);
    partial void DeleteMasters(Masters instance);
    partial void InsertClients(Clients instance);
    partial void UpdateClients(Clients instance);
    partial void DeleteClients(Clients instance);
    partial void InsertModelCars(ModelCars instance);
    partial void UpdateModelCars(ModelCars instance);
    partial void DeleteModelCars(ModelCars instance);
    partial void InsertServices(Services instance);
    partial void UpdateServices(Services instance);
    partial void DeleteServices(Services instance);
    partial void InsertStatusDone(StatusDone instance);
    partial void UpdateStatusDone(StatusDone instance);
    partial void DeleteStatusDone(StatusDone instance);
    #endregion
		
		public MyDataModelDataContext() : 
				base(global::AutoService.Properties.Settings.Default.Auto_Service_DBConnectionString5, mappingSource)
		{
			OnCreated();
		}
		
		public MyDataModelDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public MyDataModelDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public MyDataModelDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public MyDataModelDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<UserView> UserView
		{
			get
			{
				return this.GetTable<UserView>();
			}
		}
		
		public System.Data.Linq.Table<ModelCarView> ModelCarView
		{
			get
			{
				return this.GetTable<ModelCarView>();
			}
		}
		
		public System.Data.Linq.Table<ServicesView> ServicesView
		{
			get
			{
				return this.GetTable<ServicesView>();
			}
		}
		
		public System.Data.Linq.Table<MasterView> MasterView
		{
			get
			{
				return this.GetTable<MasterView>();
			}
		}
		
		public System.Data.Linq.Table<MasterSeparatelyView> MasterSeparatelyView
		{
			get
			{
				return this.GetTable<MasterSeparatelyView>();
			}
		}
		
		public System.Data.Linq.Table<ClientView> ClientView
		{
			get
			{
				return this.GetTable<ClientView>();
			}
		}
		
		public System.Data.Linq.Table<ClientJoinView> ClientJoinView
		{
			get
			{
				return this.GetTable<ClientJoinView>();
			}
		}
		
		public System.Data.Linq.Table<ApplicationView> ApplicationView
		{
			get
			{
				return this.GetTable<ApplicationView>();
			}
		}
		
		public System.Data.Linq.Table<Users> Users
		{
			get
			{
				return this.GetTable<Users>();
			}
		}
		
		public System.Data.Linq.Table<Status> Status
		{
			get
			{
				return this.GetTable<Status>();
			}
		}
		
		public System.Data.Linq.Table<Applications> Applications
		{
			get
			{
				return this.GetTable<Applications>();
			}
		}
		
		public System.Data.Linq.Table<Masters> Masters
		{
			get
			{
				return this.GetTable<Masters>();
			}
		}
		
		public System.Data.Linq.Table<Clients> Clients
		{
			get
			{
				return this.GetTable<Clients>();
			}
		}
		
		public System.Data.Linq.Table<ModelCars> ModelCars
		{
			get
			{
				return this.GetTable<ModelCars>();
			}
		}
		
		public System.Data.Linq.Table<Services> Services
		{
			get
			{
				return this.GetTable<Services>();
			}
		}
		
		public System.Data.Linq.Table<StatusDone> StatusDone
		{
			get
			{
				return this.GetTable<StatusDone>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.UserView")]
	public partial class UserView
	{
		
		private int _Id;
		
		private string _Login;
		
		private string _Password;
		
		private string _Users;
		
		public UserView()
		{
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", DbType="Int NOT NULL")]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this._Id = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Login", DbType="NVarChar(15) NOT NULL", CanBeNull=false)]
		public string Login
		{
			get
			{
				return this._Login;
			}
			set
			{
				if ((this._Login != value))
				{
					this._Login = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Password", DbType="NVarChar(20) NOT NULL", CanBeNull=false)]
		public string Password
		{
			get
			{
				return this._Password;
			}
			set
			{
				if ((this._Password != value))
				{
					this._Password = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Users", DbType="NVarChar(15) NOT NULL", CanBeNull=false)]
		public string Users
		{
			get
			{
				return this._Users;
			}
			set
			{
				if ((this._Users != value))
				{
					this._Users = value;
				}
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.ModelCarView")]
	public partial class ModelCarView
	{
		
		private int _Id;
		
		private string _Name;
		
		public ModelCarView()
		{
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.Always, DbType="Int NOT NULL IDENTITY", IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this._Id = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(30) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this._Name = value;
				}
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.ServicesView")]
	public partial class ServicesView
	{
		
		private int _Id;
		
		private string _Name;
		
		private int _Price;
		
		private string _Details;
		
		public ServicesView()
		{
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.Always, DbType="Int NOT NULL IDENTITY", IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this._Id = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this._Name = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Price", DbType="Int NOT NULL")]
		public int Price
		{
			get
			{
				return this._Price;
			}
			set
			{
				if ((this._Price != value))
				{
					this._Price = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Details", DbType="NVarChar(500) NOT NULL", CanBeNull=false)]
		public string Details
		{
			get
			{
				return this._Details;
			}
			set
			{
				if ((this._Details != value))
				{
					this._Details = value;
				}
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.MasterView")]
	public partial class MasterView
	{
		
		private int _Id;
		
		private string _Master;
		
		private string _Phone;
		
		private System.DateTime _Birthday;
		
		public MasterView()
		{
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.Always, DbType="Int NOT NULL IDENTITY", IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this._Id = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Master", DbType="NVarChar(152) NOT NULL", CanBeNull=false)]
		public string Master
		{
			get
			{
				return this._Master;
			}
			set
			{
				if ((this._Master != value))
				{
					this._Master = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Phone", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Phone
		{
			get
			{
				return this._Phone;
			}
			set
			{
				if ((this._Phone != value))
				{
					this._Phone = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Birthday", DbType="Date NOT NULL")]
		public System.DateTime Birthday
		{
			get
			{
				return this._Birthday;
			}
			set
			{
				if ((this._Birthday != value))
				{
					this._Birthday = value;
				}
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.MasterSeparatelyView")]
	public partial class MasterSeparatelyView
	{
		
		private int _Id;
		
		private string _Surname;
		
		private string _Patronymic;
		
		private string _Name;
		
		private string _Phone;
		
		private System.DateTime _Birthday;
		
		public MasterSeparatelyView()
		{
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.Always, DbType="Int NOT NULL IDENTITY", IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this._Id = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Surname", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Surname
		{
			get
			{
				return this._Surname;
			}
			set
			{
				if ((this._Surname != value))
				{
					this._Surname = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Patronymic", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Patronymic
		{
			get
			{
				return this._Patronymic;
			}
			set
			{
				if ((this._Patronymic != value))
				{
					this._Patronymic = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this._Name = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Phone", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Phone
		{
			get
			{
				return this._Phone;
			}
			set
			{
				if ((this._Phone != value))
				{
					this._Phone = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Birthday", DbType="Date NOT NULL")]
		public System.DateTime Birthday
		{
			get
			{
				return this._Birthday;
			}
			set
			{
				if ((this._Birthday != value))
				{
					this._Birthday = value;
				}
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.ClientView")]
	public partial class ClientView
	{
		
		private int _Id;
		
		private string _SurName;
		
		private string _Name;
		
		private string _Patronymic;
		
		private System.DateTime _Birthday;
		
		private string _Phone;
		
		private string _ModelAuto;
		
		private string _AutoRegisterSign;
		
		public ClientView()
		{
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", DbType="Int NOT NULL")]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this._Id = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SurName", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string SurName
		{
			get
			{
				return this._SurName;
			}
			set
			{
				if ((this._SurName != value))
				{
					this._SurName = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this._Name = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Patronymic", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Patronymic
		{
			get
			{
				return this._Patronymic;
			}
			set
			{
				if ((this._Patronymic != value))
				{
					this._Patronymic = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Birthday", DbType="Date NOT NULL")]
		public System.DateTime Birthday
		{
			get
			{
				return this._Birthday;
			}
			set
			{
				if ((this._Birthday != value))
				{
					this._Birthday = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Phone", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Phone
		{
			get
			{
				return this._Phone;
			}
			set
			{
				if ((this._Phone != value))
				{
					this._Phone = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ModelAuto", DbType="NVarChar(30) NOT NULL", CanBeNull=false)]
		public string ModelAuto
		{
			get
			{
				return this._ModelAuto;
			}
			set
			{
				if ((this._ModelAuto != value))
				{
					this._ModelAuto = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AutoRegisterSign", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string AutoRegisterSign
		{
			get
			{
				return this._AutoRegisterSign;
			}
			set
			{
				if ((this._AutoRegisterSign != value))
				{
					this._AutoRegisterSign = value;
				}
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.ClientJoinView")]
	public partial class ClientJoinView
	{
		
		private int _Id;
		
		private string _Client;
		
		private System.DateTime _Birthday;
		
		private string _Phone;
		
		private string _ModelAuto;
		
		private string _AutoRegisterSign;
		
		public ClientJoinView()
		{
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", DbType="Int NOT NULL")]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this._Id = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Client", DbType="NVarChar(152) NOT NULL", CanBeNull=false)]
		public string Client
		{
			get
			{
				return this._Client;
			}
			set
			{
				if ((this._Client != value))
				{
					this._Client = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Birthday", DbType="Date NOT NULL")]
		public System.DateTime Birthday
		{
			get
			{
				return this._Birthday;
			}
			set
			{
				if ((this._Birthday != value))
				{
					this._Birthday = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Phone", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Phone
		{
			get
			{
				return this._Phone;
			}
			set
			{
				if ((this._Phone != value))
				{
					this._Phone = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ModelAuto", DbType="NVarChar(30) NOT NULL", CanBeNull=false)]
		public string ModelAuto
		{
			get
			{
				return this._ModelAuto;
			}
			set
			{
				if ((this._ModelAuto != value))
				{
					this._ModelAuto = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AutoRegisterSign", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string AutoRegisterSign
		{
			get
			{
				return this._AutoRegisterSign;
			}
			set
			{
				if ((this._AutoRegisterSign != value))
				{
					this._AutoRegisterSign = value;
				}
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.ApplicationView")]
	public partial class ApplicationView
	{
		
		private int _Id;
		
		private string _Client;
		
		private string _Car;
		
		private System.DateTime _Birthday;
		
		private string _Master;
		
		private System.DateTime _DateVisit;
		
		private System.DateTime _DateReady;
		
		private string _ServiceName;
		
		private int _Price;
		
		private string _Done;
		
		public ApplicationView()
		{
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", DbType="Int NOT NULL")]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this._Id = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Client", DbType="NVarChar(152) NOT NULL", CanBeNull=false)]
		public string Client
		{
			get
			{
				return this._Client;
			}
			set
			{
				if ((this._Client != value))
				{
					this._Client = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Car", DbType="NVarChar(81) NOT NULL", CanBeNull=false)]
		public string Car
		{
			get
			{
				return this._Car;
			}
			set
			{
				if ((this._Car != value))
				{
					this._Car = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Birthday", DbType="Date NOT NULL")]
		public System.DateTime Birthday
		{
			get
			{
				return this._Birthday;
			}
			set
			{
				if ((this._Birthday != value))
				{
					this._Birthday = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Master", DbType="NVarChar(152) NOT NULL", CanBeNull=false)]
		public string Master
		{
			get
			{
				return this._Master;
			}
			set
			{
				if ((this._Master != value))
				{
					this._Master = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DateVisit", DbType="Date NOT NULL")]
		public System.DateTime DateVisit
		{
			get
			{
				return this._DateVisit;
			}
			set
			{
				if ((this._DateVisit != value))
				{
					this._DateVisit = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DateReady", DbType="Date NOT NULL")]
		public System.DateTime DateReady
		{
			get
			{
				return this._DateReady;
			}
			set
			{
				if ((this._DateReady != value))
				{
					this._DateReady = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ServiceName", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string ServiceName
		{
			get
			{
				return this._ServiceName;
			}
			set
			{
				if ((this._ServiceName != value))
				{
					this._ServiceName = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Price", DbType="Int NOT NULL")]
		public int Price
		{
			get
			{
				return this._Price;
			}
			set
			{
				if ((this._Price != value))
				{
					this._Price = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Done", DbType="NVarChar(15) NOT NULL", CanBeNull=false)]
		public string Done
		{
			get
			{
				return this._Done;
			}
			set
			{
				if ((this._Done != value))
				{
					this._Done = value;
				}
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Users")]
	public partial class Users : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _Login;
		
		private string _Password;
		
		private int _StatusID;
		
		private EntityRef<Status> _Status;
		
    #region Определения метода расширяемости
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnLoginChanging(string value);
    partial void OnLoginChanged();
    partial void OnPasswordChanging(string value);
    partial void OnPasswordChanged();
    partial void OnStatusIDChanging(int value);
    partial void OnStatusIDChanged();
    #endregion
		
		public Users()
		{
			this._Status = default(EntityRef<Status>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Login", DbType="NVarChar(15) NOT NULL", CanBeNull=false)]
		public string Login
		{
			get
			{
				return this._Login;
			}
			set
			{
				if ((this._Login != value))
				{
					this.OnLoginChanging(value);
					this.SendPropertyChanging();
					this._Login = value;
					this.SendPropertyChanged("Login");
					this.OnLoginChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Password", DbType="NVarChar(20) NOT NULL", CanBeNull=false)]
		public string Password
		{
			get
			{
				return this._Password;
			}
			set
			{
				if ((this._Password != value))
				{
					this.OnPasswordChanging(value);
					this.SendPropertyChanging();
					this._Password = value;
					this.SendPropertyChanged("Password");
					this.OnPasswordChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StatusID", DbType="Int NOT NULL")]
		public int StatusID
		{
			get
			{
				return this._StatusID;
			}
			set
			{
				if ((this._StatusID != value))
				{
					if (this._Status.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnStatusIDChanging(value);
					this.SendPropertyChanging();
					this._StatusID = value;
					this.SendPropertyChanged("StatusID");
					this.OnStatusIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Status_Users", Storage="_Status", ThisKey="StatusID", OtherKey="Id", IsForeignKey=true)]
		public Status Status
		{
			get
			{
				return this._Status.Entity;
			}
			set
			{
				Status previousValue = this._Status.Entity;
				if (((previousValue != value) 
							|| (this._Status.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Status.Entity = null;
						previousValue.Users.Remove(this);
					}
					this._Status.Entity = value;
					if ((value != null))
					{
						value.Users.Add(this);
						this._StatusID = value.Id;
					}
					else
					{
						this._StatusID = default(int);
					}
					this.SendPropertyChanged("Status");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Status")]
	public partial class Status : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _Login;
		
		private EntitySet<Users> _Users;
		
    #region Определения метода расширяемости
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnLoginChanging(string value);
    partial void OnLoginChanged();
    #endregion
		
		public Status()
		{
			this._Users = new EntitySet<Users>(new Action<Users>(this.attach_Users), new Action<Users>(this.detach_Users));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Login", DbType="NVarChar(15) NOT NULL", CanBeNull=false)]
		public string Login
		{
			get
			{
				return this._Login;
			}
			set
			{
				if ((this._Login != value))
				{
					this.OnLoginChanging(value);
					this.SendPropertyChanging();
					this._Login = value;
					this.SendPropertyChanged("Login");
					this.OnLoginChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Status_Users", Storage="_Users", ThisKey="Id", OtherKey="StatusID")]
		public EntitySet<Users> Users
		{
			get
			{
				return this._Users;
			}
			set
			{
				this._Users.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Users(Users entity)
		{
			this.SendPropertyChanging();
			entity.Status = this;
		}
		
		private void detach_Users(Users entity)
		{
			this.SendPropertyChanging();
			entity.Status = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Applications")]
	public partial class Applications : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private int _ClientID;
		
		private int _MasterID;
		
		private int _ServiceID;
		
		private System.DateTime _DateVisit;
		
		private int _Done;
		
		private System.DateTime _DateReady;
		
		private EntityRef<Masters> _Masters;
		
		private EntityRef<Clients> _Clients;
		
		private EntityRef<Services> _Services;
		
		private EntityRef<StatusDone> _StatusDone;
		
    #region Определения метода расширяемости
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnClientIDChanging(int value);
    partial void OnClientIDChanged();
    partial void OnMasterIDChanging(int value);
    partial void OnMasterIDChanged();
    partial void OnServiceIDChanging(int value);
    partial void OnServiceIDChanged();
    partial void OnDateVisitChanging(System.DateTime value);
    partial void OnDateVisitChanged();
    partial void OnDoneChanging(int value);
    partial void OnDoneChanged();
    partial void OnDateReadyChanging(System.DateTime value);
    partial void OnDateReadyChanged();
    #endregion
		
		public Applications()
		{
			this._Masters = default(EntityRef<Masters>);
			this._Clients = default(EntityRef<Clients>);
			this._Services = default(EntityRef<Services>);
			this._StatusDone = default(EntityRef<StatusDone>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ClientID", DbType="Int NOT NULL")]
		public int ClientID
		{
			get
			{
				return this._ClientID;
			}
			set
			{
				if ((this._ClientID != value))
				{
					if (this._Clients.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnClientIDChanging(value);
					this.SendPropertyChanging();
					this._ClientID = value;
					this.SendPropertyChanged("ClientID");
					this.OnClientIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MasterID", DbType="Int NOT NULL")]
		public int MasterID
		{
			get
			{
				return this._MasterID;
			}
			set
			{
				if ((this._MasterID != value))
				{
					if (this._Masters.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnMasterIDChanging(value);
					this.SendPropertyChanging();
					this._MasterID = value;
					this.SendPropertyChanged("MasterID");
					this.OnMasterIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ServiceID", DbType="Int NOT NULL")]
		public int ServiceID
		{
			get
			{
				return this._ServiceID;
			}
			set
			{
				if ((this._ServiceID != value))
				{
					if (this._Services.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnServiceIDChanging(value);
					this.SendPropertyChanging();
					this._ServiceID = value;
					this.SendPropertyChanged("ServiceID");
					this.OnServiceIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DateVisit", DbType="Date NOT NULL")]
		public System.DateTime DateVisit
		{
			get
			{
				return this._DateVisit;
			}
			set
			{
				if ((this._DateVisit != value))
				{
					this.OnDateVisitChanging(value);
					this.SendPropertyChanging();
					this._DateVisit = value;
					this.SendPropertyChanged("DateVisit");
					this.OnDateVisitChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Done", DbType="Int NOT NULL")]
		public int Done
		{
			get
			{
				return this._Done;
			}
			set
			{
				if ((this._Done != value))
				{
					if (this._StatusDone.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnDoneChanging(value);
					this.SendPropertyChanging();
					this._Done = value;
					this.SendPropertyChanged("Done");
					this.OnDoneChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DateReady", DbType="Date NOT NULL")]
		public System.DateTime DateReady
		{
			get
			{
				return this._DateReady;
			}
			set
			{
				if ((this._DateReady != value))
				{
					this.OnDateReadyChanging(value);
					this.SendPropertyChanging();
					this._DateReady = value;
					this.SendPropertyChanged("DateReady");
					this.OnDateReadyChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Masters_Applications", Storage="_Masters", ThisKey="MasterID", OtherKey="Id", IsForeignKey=true)]
		public Masters Masters
		{
			get
			{
				return this._Masters.Entity;
			}
			set
			{
				Masters previousValue = this._Masters.Entity;
				if (((previousValue != value) 
							|| (this._Masters.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Masters.Entity = null;
						previousValue.Applications.Remove(this);
					}
					this._Masters.Entity = value;
					if ((value != null))
					{
						value.Applications.Add(this);
						this._MasterID = value.Id;
					}
					else
					{
						this._MasterID = default(int);
					}
					this.SendPropertyChanged("Masters");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Clients_Applications", Storage="_Clients", ThisKey="ClientID", OtherKey="Id", IsForeignKey=true)]
		public Clients Clients
		{
			get
			{
				return this._Clients.Entity;
			}
			set
			{
				Clients previousValue = this._Clients.Entity;
				if (((previousValue != value) 
							|| (this._Clients.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Clients.Entity = null;
						previousValue.Applications.Remove(this);
					}
					this._Clients.Entity = value;
					if ((value != null))
					{
						value.Applications.Add(this);
						this._ClientID = value.Id;
					}
					else
					{
						this._ClientID = default(int);
					}
					this.SendPropertyChanged("Clients");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Services_Applications", Storage="_Services", ThisKey="ServiceID", OtherKey="Id", IsForeignKey=true)]
		public Services Services
		{
			get
			{
				return this._Services.Entity;
			}
			set
			{
				Services previousValue = this._Services.Entity;
				if (((previousValue != value) 
							|| (this._Services.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Services.Entity = null;
						previousValue.Applications.Remove(this);
					}
					this._Services.Entity = value;
					if ((value != null))
					{
						value.Applications.Add(this);
						this._ServiceID = value.Id;
					}
					else
					{
						this._ServiceID = default(int);
					}
					this.SendPropertyChanged("Services");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="StatusDone_Applications", Storage="_StatusDone", ThisKey="Done", OtherKey="Id", IsForeignKey=true)]
		public StatusDone StatusDone
		{
			get
			{
				return this._StatusDone.Entity;
			}
			set
			{
				StatusDone previousValue = this._StatusDone.Entity;
				if (((previousValue != value) 
							|| (this._StatusDone.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._StatusDone.Entity = null;
						previousValue.Applications.Remove(this);
					}
					this._StatusDone.Entity = value;
					if ((value != null))
					{
						value.Applications.Add(this);
						this._Done = value.Id;
					}
					else
					{
						this._Done = default(int);
					}
					this.SendPropertyChanged("StatusDone");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Masters")]
	public partial class Masters : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _Name;
		
		private string _Surname;
		
		private string _Patronymic;
		
		private string _Phone;
		
		private System.DateTime _Birthday;
		
		private EntitySet<Applications> _Applications;
		
    #region Определения метода расширяемости
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnSurnameChanging(string value);
    partial void OnSurnameChanged();
    partial void OnPatronymicChanging(string value);
    partial void OnPatronymicChanged();
    partial void OnPhoneChanging(string value);
    partial void OnPhoneChanged();
    partial void OnBirthdayChanging(System.DateTime value);
    partial void OnBirthdayChanged();
    #endregion
		
		public Masters()
		{
			this._Applications = new EntitySet<Applications>(new Action<Applications>(this.attach_Applications), new Action<Applications>(this.detach_Applications));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Surname", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Surname
		{
			get
			{
				return this._Surname;
			}
			set
			{
				if ((this._Surname != value))
				{
					this.OnSurnameChanging(value);
					this.SendPropertyChanging();
					this._Surname = value;
					this.SendPropertyChanged("Surname");
					this.OnSurnameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Patronymic", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Patronymic
		{
			get
			{
				return this._Patronymic;
			}
			set
			{
				if ((this._Patronymic != value))
				{
					this.OnPatronymicChanging(value);
					this.SendPropertyChanging();
					this._Patronymic = value;
					this.SendPropertyChanged("Patronymic");
					this.OnPatronymicChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Phone", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Phone
		{
			get
			{
				return this._Phone;
			}
			set
			{
				if ((this._Phone != value))
				{
					this.OnPhoneChanging(value);
					this.SendPropertyChanging();
					this._Phone = value;
					this.SendPropertyChanged("Phone");
					this.OnPhoneChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Birthday", DbType="Date NOT NULL")]
		public System.DateTime Birthday
		{
			get
			{
				return this._Birthday;
			}
			set
			{
				if ((this._Birthday != value))
				{
					this.OnBirthdayChanging(value);
					this.SendPropertyChanging();
					this._Birthday = value;
					this.SendPropertyChanged("Birthday");
					this.OnBirthdayChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Masters_Applications", Storage="_Applications", ThisKey="Id", OtherKey="MasterID")]
		public EntitySet<Applications> Applications
		{
			get
			{
				return this._Applications;
			}
			set
			{
				this._Applications.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Applications(Applications entity)
		{
			this.SendPropertyChanging();
			entity.Masters = this;
		}
		
		private void detach_Applications(Applications entity)
		{
			this.SendPropertyChanging();
			entity.Masters = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Clients")]
	public partial class Clients : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private int _ModelCarID;
		
		private string _Name;
		
		private string _SurName;
		
		private string _Patronymic;
		
		private string _Phone;
		
		private System.DateTime _Birthday;
		
		private string _AutoRegisterSign;
		
		private EntitySet<Applications> _Applications;
		
		private EntityRef<ModelCars> _ModelCars;
		
    #region Определения метода расширяемости
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnModelCarIDChanging(int value);
    partial void OnModelCarIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnSurNameChanging(string value);
    partial void OnSurNameChanged();
    partial void OnPatronymicChanging(string value);
    partial void OnPatronymicChanged();
    partial void OnPhoneChanging(string value);
    partial void OnPhoneChanged();
    partial void OnBirthdayChanging(System.DateTime value);
    partial void OnBirthdayChanged();
    partial void OnAutoRegisterSignChanging(string value);
    partial void OnAutoRegisterSignChanged();
    #endregion
		
		public Clients()
		{
			this._Applications = new EntitySet<Applications>(new Action<Applications>(this.attach_Applications), new Action<Applications>(this.detach_Applications));
			this._ModelCars = default(EntityRef<ModelCars>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ModelCarID", DbType="Int NOT NULL")]
		public int ModelCarID
		{
			get
			{
				return this._ModelCarID;
			}
			set
			{
				if ((this._ModelCarID != value))
				{
					if (this._ModelCars.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnModelCarIDChanging(value);
					this.SendPropertyChanging();
					this._ModelCarID = value;
					this.SendPropertyChanged("ModelCarID");
					this.OnModelCarIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SurName", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string SurName
		{
			get
			{
				return this._SurName;
			}
			set
			{
				if ((this._SurName != value))
				{
					this.OnSurNameChanging(value);
					this.SendPropertyChanging();
					this._SurName = value;
					this.SendPropertyChanged("SurName");
					this.OnSurNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Patronymic", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Patronymic
		{
			get
			{
				return this._Patronymic;
			}
			set
			{
				if ((this._Patronymic != value))
				{
					this.OnPatronymicChanging(value);
					this.SendPropertyChanging();
					this._Patronymic = value;
					this.SendPropertyChanged("Patronymic");
					this.OnPatronymicChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Phone", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Phone
		{
			get
			{
				return this._Phone;
			}
			set
			{
				if ((this._Phone != value))
				{
					this.OnPhoneChanging(value);
					this.SendPropertyChanging();
					this._Phone = value;
					this.SendPropertyChanged("Phone");
					this.OnPhoneChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Birthday", DbType="Date NOT NULL")]
		public System.DateTime Birthday
		{
			get
			{
				return this._Birthday;
			}
			set
			{
				if ((this._Birthday != value))
				{
					this.OnBirthdayChanging(value);
					this.SendPropertyChanging();
					this._Birthday = value;
					this.SendPropertyChanged("Birthday");
					this.OnBirthdayChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AutoRegisterSign", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string AutoRegisterSign
		{
			get
			{
				return this._AutoRegisterSign;
			}
			set
			{
				if ((this._AutoRegisterSign != value))
				{
					this.OnAutoRegisterSignChanging(value);
					this.SendPropertyChanging();
					this._AutoRegisterSign = value;
					this.SendPropertyChanged("AutoRegisterSign");
					this.OnAutoRegisterSignChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Clients_Applications", Storage="_Applications", ThisKey="Id", OtherKey="ClientID")]
		public EntitySet<Applications> Applications
		{
			get
			{
				return this._Applications;
			}
			set
			{
				this._Applications.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ModelCars_Clients", Storage="_ModelCars", ThisKey="ModelCarID", OtherKey="Id", IsForeignKey=true)]
		public ModelCars ModelCars
		{
			get
			{
				return this._ModelCars.Entity;
			}
			set
			{
				ModelCars previousValue = this._ModelCars.Entity;
				if (((previousValue != value) 
							|| (this._ModelCars.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ModelCars.Entity = null;
						previousValue.Clients.Remove(this);
					}
					this._ModelCars.Entity = value;
					if ((value != null))
					{
						value.Clients.Add(this);
						this._ModelCarID = value.Id;
					}
					else
					{
						this._ModelCarID = default(int);
					}
					this.SendPropertyChanged("ModelCars");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Applications(Applications entity)
		{
			this.SendPropertyChanging();
			entity.Clients = this;
		}
		
		private void detach_Applications(Applications entity)
		{
			this.SendPropertyChanging();
			entity.Clients = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.ModelCars")]
	public partial class ModelCars : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _Name;
		
		private EntitySet<Clients> _Clients;
		
    #region Определения метода расширяемости
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    #endregion
		
		public ModelCars()
		{
			this._Clients = new EntitySet<Clients>(new Action<Clients>(this.attach_Clients), new Action<Clients>(this.detach_Clients));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(30) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ModelCars_Clients", Storage="_Clients", ThisKey="Id", OtherKey="ModelCarID")]
		public EntitySet<Clients> Clients
		{
			get
			{
				return this._Clients;
			}
			set
			{
				this._Clients.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Clients(Clients entity)
		{
			this.SendPropertyChanging();
			entity.ModelCars = this;
		}
		
		private void detach_Clients(Clients entity)
		{
			this.SendPropertyChanging();
			entity.ModelCars = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Services")]
	public partial class Services : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _Name;
		
		private int _Price;
		
		private string _Details;
		
		private EntitySet<Applications> _Applications;
		
    #region Определения метода расширяемости
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnPriceChanging(int value);
    partial void OnPriceChanged();
    partial void OnDetailsChanging(string value);
    partial void OnDetailsChanged();
    #endregion
		
		public Services()
		{
			this._Applications = new EntitySet<Applications>(new Action<Applications>(this.attach_Applications), new Action<Applications>(this.detach_Applications));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Price", DbType="Int NOT NULL")]
		public int Price
		{
			get
			{
				return this._Price;
			}
			set
			{
				if ((this._Price != value))
				{
					this.OnPriceChanging(value);
					this.SendPropertyChanging();
					this._Price = value;
					this.SendPropertyChanged("Price");
					this.OnPriceChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Details", DbType="NVarChar(500) NOT NULL", CanBeNull=false)]
		public string Details
		{
			get
			{
				return this._Details;
			}
			set
			{
				if ((this._Details != value))
				{
					this.OnDetailsChanging(value);
					this.SendPropertyChanging();
					this._Details = value;
					this.SendPropertyChanged("Details");
					this.OnDetailsChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Services_Applications", Storage="_Applications", ThisKey="Id", OtherKey="ServiceID")]
		public EntitySet<Applications> Applications
		{
			get
			{
				return this._Applications;
			}
			set
			{
				this._Applications.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Applications(Applications entity)
		{
			this.SendPropertyChanging();
			entity.Services = this;
		}
		
		private void detach_Applications(Applications entity)
		{
			this.SendPropertyChanging();
			entity.Services = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.StatusDone")]
	public partial class StatusDone : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _DoneName;
		
		private EntitySet<Applications> _Applications;
		
    #region Определения метода расширяемости
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnDoneNameChanging(string value);
    partial void OnDoneNameChanged();
    #endregion
		
		public StatusDone()
		{
			this._Applications = new EntitySet<Applications>(new Action<Applications>(this.attach_Applications), new Action<Applications>(this.detach_Applications));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DoneName", DbType="NVarChar(15) NOT NULL", CanBeNull=false)]
		public string DoneName
		{
			get
			{
				return this._DoneName;
			}
			set
			{
				if ((this._DoneName != value))
				{
					this.OnDoneNameChanging(value);
					this.SendPropertyChanging();
					this._DoneName = value;
					this.SendPropertyChanged("DoneName");
					this.OnDoneNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="StatusDone_Applications", Storage="_Applications", ThisKey="Id", OtherKey="Done")]
		public EntitySet<Applications> Applications
		{
			get
			{
				return this._Applications;
			}
			set
			{
				this._Applications.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Applications(Applications entity)
		{
			this.SendPropertyChanging();
			entity.StatusDone = this;
		}
		
		private void detach_Applications(Applications entity)
		{
			this.SendPropertyChanging();
			entity.StatusDone = null;
		}
	}
}
#pragma warning restore 1591
